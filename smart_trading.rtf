{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 HelveticaNeue-MediumItalic;
\f3\fnil\fcharset0 Menlo-Regular;\f4\fnil\fcharset0 AndaleMono;}
{\colortbl;\red255\green255\blue255;\red27\green27\blue27;\red227\green241\blue226;\red255\green255\blue255;
\red151\green0\blue126;\red247\green247\blue247;\red181\green0\blue19;\red20\green0\blue196;\red80\green42\blue24;
\red73\green17\blue135;\red13\green100\blue1;\red0\green0\blue0;\red47\green255\blue18;\red0\green0\blue0;
\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c14118\c14118\c14118;\cssrgb\c90980\c95294\c90980;\cssrgb\c100000\c100000\c100000;
\cssrgb\c66667\c5098\c56863;\cssrgb\c97647\c97647\c97647;\cssrgb\c76863\c10196\c8627;\cssrgb\c10980\c0\c81176;\cssrgb\c39216\c21961\c12549;
\cssrgb\c36078\c14902\c60000;\cssrgb\c0\c45490\c0;\cssrgb\c0\c0\c0;\cssrgb\c15686\c99608\c7843;\csgray\c0\c90000;
\cssrgb\c0\c0\c0\c80000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \AppleTypeServices\AppleTypeServicesF65539 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Smart Trading\cb4 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs40 \AppleTypeServices\AppleTypeServicesF65539 \cf2 Trading refers to the buying and selling of financial instruments, such as stocks, bonds, currencies, commodities, or derivatives, intending to make a profit. Journal traders spent their whole day looking at different dashboards trying to figure out that one perfect decision whether to buy or sell.\
\
\pard\pardeftab720\partightenfactor0
\cf2 This automation script can help traders and investors get a good understanding of any stock in which you are willing to invest. It makes use of\'a0
\f2\i \AppleTypeServices \cf2 \cb4 \strokec2 Prophet\'a0
\f1\i0 \AppleTypeServices\AppleTypeServicesF65539 \cf2 \cb4 \strokec2 Python library to predict stock prices based on historical stock data taken from Yahoo Finance for the near future.\

\f3\fs28 \AppleTypeServices \cf5 \cb6 \strokec5 import\cf2 \strokec2  streamlit \cf5 \strokec5 as\cf2 \strokec2  st\cb1 \
\cf5 \cb6 \strokec5 from\cf2 \strokec2  datetime \cf5 \strokec5 import\cf2 \strokec2  date\cb1 \
\
\cf5 \cb6 \strokec5 import\cf2 \strokec2  yfinance \cf5 \strokec5 as\cf2 \strokec2  yf\cb1 \
\cf5 \cb6 \strokec5 from\cf2 \strokec2  prophet \cf5 \strokec5 import\cf2 \strokec2  Prophet\cb1 \
\cf5 \cb6 \strokec5 from\cf2 \strokec2  prophet.plot \cf5 \strokec5 import\cf2 \strokec2  plot_plotly\cb1 \
\cf5 \cb6 \strokec5 from\cf2 \strokec2  plotly \cf5 \strokec5 import\cf2 \strokec2  graph_objs \cf5 \strokec5 as\cf2 \strokec2  go\cb1 \
\
\cb6 START = \cf7 \strokec7 "2015-01-01"\cf2 \cb1 \strokec2 \
\cb6 TODAY = date.today().strftime(\cf7 \strokec7 "%Y-%m-%d"\cf2 \strokec2 )\cb1 \
\
\cb6 st.title(\cf7 \strokec7 'Stock Forecast App'\cf2 \strokec2 )\cb1 \
\
\cb6 stocks = (\cf7 \strokec7 'MSFT'\cf2 \strokec2 ,\cf7 \strokec7 "TSLA"\cf2 \strokec2 ,\cf7 \strokec7 'GOOG'\cf2 \strokec2 , \cf7 \strokec7 'AAPL'\cf2 \strokec2 , \cf7 \strokec7 "NVDA"\cf2 \strokec2 )\cb1 \
\cb6 selected_stock = st.selectbox(\cf7 \strokec7 'Select dataset for prediction'\cf2 \strokec2 , stocks)\cb1 \
\
\cb6 n_years = st.slider(\cf7 \strokec7 'Years of prediction:'\cf2 \strokec2 , \cf8 \strokec8 1\cf2 \strokec2 , \cf8 \strokec8 4\cf2 \strokec2 )\cb1 \
\cb6 period = n_years * \cf8 \strokec8 365\cf2 \cb1 \strokec2 \
\
\
\cf9 \cb6 \strokec9 @st.cache\cf2 \cb1 \strokec2 \
\cf5 \cb6 \strokec5 def\cf2 \strokec2  load_data(\cf10 \strokec10 ticker\cf2 \strokec2 ):\cb1 \
\cb6     data = yf.download(ticker, START, TODAY)\cb1 \
\cb6     data.reset_index(inplace=\cf5 \strokec5 True\cf2 \strokec2 )\cb1 \
\cb6     \cf5 \strokec5 return\cf2 \strokec2  data\cb1 \
\
\cb6  \cb1 \
\cb6 data_load_state = st.text(\cf7 \strokec7 'Loading data...'\cf2 \strokec2 )\cb1 \
\cb6 data = load_data(selected_stock)\cb1 \
\cb6 data_load_state.text(\cf7 \strokec7 'Loading data... done!'\cf2 \strokec2 )\cb1 \
\
\cb6 st.subheader(\cf7 \strokec7 'Raw data'\cf2 \strokec2 )\cb1 \
\cb6 st.write(data.tail())\cb1 \
\
\cf11 \cb6 \strokec11 # Plot raw data\cf2 \cb1 \strokec2 \
\cf5 \cb6 \strokec5 def\cf2 \strokec2  plot_raw_data():\cb1 \
\cb6  fig = go.Figure()\cb1 \
\cb6  fig.add_trace(go.Scatter(x=data[\cf7 \strokec7 'Date'\cf2 \strokec2 ], y=data[\cf7 \strokec7 'Open'\cf2 \strokec2 ], name=\cf7 \strokec7 "stock_open"\cf2 \strokec2 ))\cb1 \
\cb6  fig.add_trace(go.Scatter(x=data[\cf7 \strokec7 'Date'\cf2 \strokec2 ], y=data[\cf7 \strokec7 'Close'\cf2 \strokec2 ], name=\cf7 \strokec7 "stock_close"\cf2 \strokec2 ))\cb1 \
\cb6  fig.layout.update(title_text=\cf7 \strokec7 'Time Series data with Rangeslider'\cf2 \strokec2 , xaxis_rangeslider_visible=\cf5 \strokec5 True\cf2 \strokec2 )\cb1 \
\cb6  st.plotly_chart(fig)\cb1 \
\cb6  \cb1 \
\cb6 plot_raw_data()\cb1 \
\
\cf11 \cb6 \strokec11 # Predict forecast with Prophet.\cf2 \cb1 \strokec2 \
\cb6 df_train = data[[\cf7 \strokec7 'Date'\cf2 \strokec2 ,\cf7 \strokec7 'Close'\cf2 \strokec2 ]]\cb1 \
\cb6 df_train = df_train.rename(columns=\{\cf7 \strokec7 "Date"\cf2 \strokec2 : \cf7 \strokec7 "ds"\cf2 \strokec2 , \cf7 \strokec7 "Close"\cf2 \strokec2 : \cf7 \strokec7 "y"\cf2 \strokec2 \})\cb1 \
\
\cb6 m = Prophet()\cb1 \
\cb6 m.fit(df_train)\cb1 \
\cb6 future = m.make_future_dataframe(periods=period)\cb1 \
\cb6 forecast = m.predict(future)\cb1 \
\
\cf11 \cb6 \strokec11 # Show and plot forecast\cf2 \cb1 \strokec2 \
\cb6 st.subheader(\cf7 \strokec7 'Forecast data'\cf2 \strokec2 )\cb1 \
\cb6 st.write(forecast.tail())\cb1 \
\cb6     \cb1 \
\cb6 st.write(\cf7 \strokec7 f'Forecast plot for \strokec12 \{n_years\}\strokec7  years'\cf2 \strokec2 )\cb1 \
\cb6 fig1 = plot_plotly(m, forecast)\cb1 \
\cb6 st.plotly_chart(fig1)\cb1 \
\
\cb6 st.write(\cf7 \strokec7 "Forecast components"\cf2 \strokec2 )\cb1 \
\cb6 fig2 = m.plot_components(forecast)\cb1 \
\cb6 st.write(fig2)\cb1 \

\f1\fs40 \AppleTypeServices\AppleTypeServicesF65539 \cf2 \cb4 \strokec2 To run this you first need to install Streamlit, yfinance, prophet, and plotly python libraries using pip.\

\f3\fs28 \AppleTypeServices \cf2 \cb6 \strokec2 pip install streamlit prophet yfinance plotly\cb1 \

\f1\fs40 \AppleTypeServices\AppleTypeServicesF65539 \cf2 \cb4 \strokec2 and then you can run it using the command\'a0
\f4\fs24 \AppleTypeServices \cf13 \cb14 \kerning1\expnd0\expndtw0 \CocoaLigature0 \outl0\strokewidth0 streamlit /Users/ulrike_imac_air/projects/code/smart_trading.py
\f1\fs40 \AppleTypeServices\AppleTypeServicesF65539 \cf2 \cb4 \expnd0\expndtw0\kerning0
\CocoaLigature1 \outl0\strokewidth0 \strokec2 \

\fs24 \AppleTypeServices \cf15 \cb1 \strokec15 \
\pard\pardeftab720\partightenfactor0

\fs40 \AppleTypeServices\AppleTypeServicesF65539 \cf2 \cb4 \strokec2 \
}