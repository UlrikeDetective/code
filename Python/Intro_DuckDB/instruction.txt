python3 -m venv code_python_env
source code_python_env/bin/activate

pip3 install duckdb
pip3 install numpy pandas

Querying Data with DuckDB
 
With the quick installation out of the way we can move on to do some data analysis.

Note: It’s common to use connections when interacting with databases. You can use duckdb.connect() to work with both in-memory databases and persistent storage.

Using duckdb.connect() to connect to an in-memory database that exists only during the session. This is suitable for quick analysis, especially when you don't need to store the results long-term.
To persist data between sessions and queries, pass a file path to the connect() function like so: duckdb.connect('my_database.db').
But we’ll query CSV files and don’t quite need a connection object. So this was just a note to give you an idea when you’re querying databases.

Generating Sample CSV Files
▶️ You can find the code for this tutorial on GitHub.

We'll create a mock sales dataset, a couple of csv files, that include product details, prices, quantities sold, and the regions in which the sales occurred. Running generate_csv.py in your project folder to generate two CSV files: sales_data.csv and product_details.csv.

When Working with CSV files in DuckDB, you can read the file into a relation: duckdb.read_csv(‘your_file.csv’) and then query it. Or you can work directly with files and query them like so: