python3 -m venv code_python_env
source code_python_env/bin/activate

pip install Flask

Create a Flask Application:​

Create a new Python file (e.g., app.py) and add the basic code to start a Flask application.

Go to
python Intro_Flask/app.py

Flask structure

app.py​

The main application file that contains the Flask app instance and routing logic.​

templates/​

The directory that holds the HTML templates used to render the web pages.​

static/​

The directory contains static assets like CSS, JavaScript, and images.​

src/

This directory contains all the source code files for the application.

Utils/

This directory contains all the common and utility functions for the application.

logs/

This directory contains log files(tracking of the application process) for the application.

tmp/

This directory contains the temporary files needed during the process of executing an application.

requirements.txt​

A file that lists the Python dependencies required for the project.

Detailed overview of Flask​​:
Every Web development has three main sections that need to be understood by the web developer.

Front End (website pages)
API (Application Programming language)
Back end(Server database)
we are going to see three topics in detail on how Flask provides it features to three section.

Templates on Flask
HTML Templates​

Flask uses Jinja2 as its templating engine, which allows developers to create dynamic HTML templates that can be rendered on the server and sent to the client.​

Data Passing​

Developers can pass data from their Flask routes to the templates, allowing them to dynamically generate content based on the data available.​

Logic in Templates​

Jinja2 templates in Flask support basic programming logic, such as conditional statements and loops, which can be used to create more complex and dynamic web pages.​

Template Inheritance​

Flask’s templates support inheritance, which allows developers to create a base template and extend it with more specific content and functionality.

Routing on Flask
URL Mapping​

In Flask, developers can define routes that map to specific URLs. This allows them to create different pages or endpoints for their web application, each with its own functionality and content.​

Dynamic Routing​

Flask also supports dynamic routing, which allows developers to create routes that accept parameters. This is useful for creating RESTful APIs or for building web applications with complex navigation structures.​

URL Generation​

Flask provides a built-in URL generation function that allows developers to generate URLs for their routes dynamically. This can be useful for creating links or redirects within the web application.

Database connection on Flask
SQL Alchemy​

Flask can be integrated with the SQL Alchemy library, which provides a powerful Object-Relational Mapping (ORM) layer that simplifies database interactions.​

Database Migrations​

Flask also supports database migrations using tools like Alembic, which makes it easy to manage changes to the database schema over time.​

Database Queries​

Developers can use SQL Alchemy to write complex database queries and interact with the database directly from their Flask routes and models.​

CRUD operation on Flask​:
Create​

In Flask, creating new data is typically done using the HTTP POST method. Developers can create a route that accepts form data and saves it to a database or other storage mechanism.​

Read​

Reading data in Flask involves creating routes that retrieve data from a database or other storage mechanism and displaying it to the user. This is typically done using the HTTP GET method.​

Update​

Updating data in Flask involves creating a route that accepts form data and updates the corresponding record in the database or other storage mechanism. This is typically done using the HTTP PUT or PATCH method.

Delete

Deleting data in Flask involves creating the routes that delete data from a database or other storage mechanism and displaying it to the user. This is typically done using the HTTP DELETE method.

REST operation on Flask​:
GET​

The GET method is used to retrieve data from a server. In a Flask-based REST API, developers can create routes that respond to GET requests and return the requested data.​

POST​

The POST method is used to create new data on the server. In a Flask-based REST API, developers can create routes that accept POST requests and create new records in a database or other storage mechanism.​

PUT/PATCH​

The PUT and PATCH methods are used to update existing data on the server. In a Flask-based REST API, developers can create routes that accept these requests and update the corresponding records in a database or other storage mechanism.​

DELETE​

The DELETE method is used to remove data from the server. In a Flask-based REST API, developers can create routes that accept DELETE requests and remove the corresponding records from a database or other storage mechanism.

